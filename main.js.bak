const {
  default: makeWASocket,
  useSingleFileAuthState
} = require('@adiwajshing/baileys');

const { Boom } = require('@hapi/boom');
const path = require('path');
const fs = require('fs');

const { downloadSessionFromDrive } = require('./drive');

// Jalankan saat startup
(async () => {
  const success = await downloadSessionFromDrive();
  if (!success) {
    console.log('🔁 Tidak ada session tersimpan, akan minta scan QR...');
  }

  const authPath = './auth_info_baileys/creds.json';
  const { state, saveState } = useSingleFileAuthState(authPath);

  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true,
  });

  sock.ev.on('creds.update', saveState);

  sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect } = update;
    if (connection === 'close') {
      const reason = new Boom(lastDisconnect?.error)?.output?.statusCode;
      if (reason === DisconnectReason.loggedOut) {
        console.log('❌ Logged out. Session dihapus.');
        fs.rmSync('./auth_info_baileys', { recursive: true, force: true });
      } else {
        console.log('🔁 Connection closed. Trying to reconnect...');
        process.exit(1); // Railway akan restart container
      }
    } else if (connection === 'open') {
      console.log('✅ Connected to WhatsApp');
    }
  });

  sock.ev.on('messages.upsert', async (msg) => {
    const message = msg.messages[0];
    if (!message.message) return;

    const sender = message.key.remoteJid;
    const text = message.message.conversation || message.message.extendedTextMessage?.text;

    console.log('📩 Message from:', sender, '|', text);

    if (text?.toLowerCase() === 'hi') {
      await sock.sendMessage(sender, { text: 'Hello from Railway bot 👋' });
    }
  });
})();
